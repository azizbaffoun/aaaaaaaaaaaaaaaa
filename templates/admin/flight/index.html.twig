{% extends 'admin/base_admin.html.twig' %}

{% block admin_title %}Flight Management{% endblock %}

{% block admin_stylesheets %}
    {{ parent() }}
    <style>
        .admin-flight-container {
            width: 100%;
            display: flex;
            flex-direction: column;
            padding: 0;
            margin: 0;
        }
        
        .admin-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            width: 100%;
            margin-bottom: 20px;
        }
        
        .page-title {
            font-size: 28px;
            font-weight: 700;
            margin: 0;
            padding: 0;
            color: #333;
        }
        
        .btn-primary {
            background-color: #4e73df;
            border-color: #4e73df;
            padding: 8px 16px;
            border-radius: 4px;
            color: white;
            text-decoration: none;
            transition: all 0.2s;
            font-weight: 500;
        }
        
        .btn-primary:hover {
            background-color: #2e59d9;
            border-color: #2e59d9;
        }
        
        .flight-table-container {
            width: 100%;
            background-color: white;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            overflow: hidden;
        }
        
        .admin-table {
            width: 100%;
            border-collapse: collapse;
        }
        
        .admin-table th {
            background-color: #f8f9fc;
            color: #4e73df;
            font-weight: 600;
            text-align: left;
            padding: 15px;
            font-size: 14px;
            border-bottom: 1px solid #e3e6f0;
        }
        
        .admin-table td {
            padding: 15px;
            border-bottom: 1px solid #e3e6f0;
            color: #5a5c69;
        }
        
        .admin-table tr:last-child td {
            border-bottom: none;
        }
        
        .admin-table tr:hover td {
            background-color: #f8f9fc;
        }
        
        .btn-edit {
            background-color: #36b9cc;
            color: white;
            padding: 5px 10px;
            border-radius: 4px;
            text-decoration: none;
            margin-right: 5px;
            font-size: 13px;
        }
        
        .btn-edit:hover {
            background-color: #2c9faf;
        }
        
        .actions {
            display: flex;
            align-items: center;
        }
        
        .empty-message {
            padding: 20px;
            text-align: center;
            color: #858796;
        }
        
        /* Modal Styles */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 2000;
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }
        
        .modal-overlay.active {
            opacity: 1;
            visibility: visible;
        }
        
        .modal-container {
            background-color: #fff;
            border-radius: 12px;
            box-shadow: 0 15px 35px rgba(50, 50, 93, 0.1), 0 5px 15px rgba(0, 0, 0, 0.07);
            width: 90%;
            max-width: 700px;
            max-height: 90vh;
            overflow-y: auto;
            transform: translateY(20px);
            transition: all 0.3s ease;
            position: relative;
            padding: 0;
        }
        
        .modal-overlay.active .modal-container {
            transform: translateY(0);
        }
        
        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 30px;
            border-bottom: 1px solid #e0e0e0;
            background: linear-gradient(135deg, #4e73df 0%, #224abe 100%);
            color: white;
            border-radius: 12px 12px 0 0;
        }
        
        .modal-title {
            font-size: 24px;
            font-weight: 600;
            margin: 0;
        }
        
        .modal-close {
            background: none;
            border: none;
            font-size: 24px;
            color: white;
            cursor: pointer;
            opacity: 0.8;
            transition: opacity 0.2s;
        }
        
        .modal-close:hover {
            opacity: 1;
        }
        
        .modal-body {
            padding: 30px;
        }
        
        .form-group {
            margin-bottom: 24px;
            position: relative;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #4a5568;
            font-size: 14px;
        }
        
        .form-control {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            background-color: #f8fafc;
            font-size: 16px;
            transition: all 0.2s;
        }
        
        .form-control:focus {
            outline: none;
            border-color: #4e73df;
            box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.15);
            background-color: white;
        }
        
        .form-control.is-invalid {
            border-color: #e53e3e;
        }
        
        .invalid-feedback {
            color: #e53e3e;
            font-size: 12px;
            margin-top: 4px;
            display: none;
        }
        
        .form-control.is-invalid + .invalid-feedback {
            display: block;
        }
        
        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            grid-gap: 16px;
        }
        
        .modal-footer {
            padding: 20px 30px;
            border-top: 1px solid #e0e0e0;
            display: flex;
            justify-content: flex-end;
        }
        
        .btn {
            padding: 10px 24px;
            border-radius: 8px;
            font-weight: 600;
            font-size: 16px;
            cursor: pointer;
            transition: all 0.2s;
            border: none;
        }
        
        .btn-secondary {
            background-color: #e2e8f0;
            color: #4a5568;
            margin-right: 12px;
        }
        
        .btn-secondary:hover {
            background-color: #cbd5e0;
        }
        
        .btn-submit {
            background-color: #4e73df;
            color: white;
        }
        
        .btn-submit:hover {
            background-color: #2e59d9;
        }
        
        /* Improved icon styling */
        .form-control-wrapper {
            position: relative;
        }
        
        .input-icon {
            position: absolute;
            top: 50%;
            right: 15px;
            transform: translateY(-50%);
            color: #a0aec0;
            z-index: 10;
            font-size: 16px;
            pointer-events: none;
        }
        
        .form-control {
            padding-right: 40px; /* Give space for icon */
        }
        
        /* Custom styling for specific fields */
        .modal-body {
            padding: 30px;
        }
        
        /* Make icons more visible */
        .modal-body .fas {
            opacity: 0.8;
        }
        
        /* Loading spinner for form submission */
        .spinner {
            display: none;
            width: 20px;
            height: 20px;
            margin-right: 10px;
            border: 3px solid rgba(255,255,255,.3);
            border-radius: 50%;
            border-top-color: #fff;
            animation: spin 1s ease-in-out infinite;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        .btn-submit.loading .spinner {
            display: inline-block;
        }
        
        /* Success notification */
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 16px 24px;
            background-color: #48bb78;
            color: white;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            z-index: 2100;
            transform: translateX(120%);
            transition: transform 0.3s ease;
        }
        
        .notification.active {
            transform: translateX(0);
        }
    </style>
{% endblock %}

{% block admin_content %}
    <div class="admin-flight-container">
        <div class="admin-header">
            <h1 class="page-title">Flight Management</h1>
            <button type="button" id="createFlightBtn" class="btn btn-primary" onclick="openFlightModal()">Create New Flight</button>
        </div>
        
        <div class="flight-table-container">
            <table class="admin-table">
                <thead>
                    <tr>
                        <th>Company</th>
                        <th>Departure Airport</th>
                        <th>Arrival Airport</th>
                        <th>Departure Date</th>
                        <th>Arrival Date</th>
                        <th>Price</th>
                        <th>Destination</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                {% for vol in vols %}
                    <tr>
                        <td>{{ vol.compagnie }}</td>
                        <td>{{ vol.aeroportDepart }}</td>
                        <td>{{ vol.aeroportArrivee }}</td>
                        <td>{{ vol.dateDepart ? vol.dateDepart|date('Y-m-d H:i') : '' }}</td> 
                        <td>{{ vol.dateArrivee ? vol.dateArrivee|date('Y-m-d H:i') : '' }}</td> 
                        <td>{{ vol.prix | number_format(2, '.', ',') }} €</td> 
                        <td>{{ vol.destination }}</td>
                        <td class="actions">
                            <button type="button" class="btn-edit" 
                                onclick="openEditModal({{ vol.id }}, '{{ vol.compagnie }}', '{{ vol.destination }}', 
                                '{{ vol.aeroportDepart }}', '{{ vol.aeroportArrivee }}', 
                                '{{ vol.dateDepart ? vol.dateDepart|date('Y-m-d\\TH:i') : '' }}', 
                                '{{ vol.dateArrivee ? vol.dateArrivee|date('Y-m-d\\TH:i') : '' }}', 
                                {{ vol.prix }})">
                                Edit
                            </button>
                            {{ include('vol/_delete_form.html.twig', {'vol': vol }) }}
                        </td>
                    </tr>
                {% else %}
                    <tr>
                        <td colspan="8" class="empty-message">No flights found</td> 
                    </tr>
                {% endfor %}
                </tbody>
            </table>
        </div>
    </div>
    
    <!-- Create Flight Modal -->
    <div id="createFlightModal" class="modal-overlay">
        <div class="modal-container">
            <div class="modal-header">
                <h3 class="modal-title">Create New Flight</h3>
                <button class="modal-close" id="closeModal">&times;</button>
            </div>
            <div class="modal-body">
                <form id="newFlightForm">
                    <div class="form-row">
                        <div class="form-group">
                            <label for="compagnie">Company</label>
                            <div class="form-control-wrapper">
                                <input type="text" id="compagnie" name="compagnie" class="form-control" required>
                                <span class="input-icon">
                                    <i class="fas fa-plane"></i>
                                </span>
                                <div class="invalid-feedback">Please enter a valid company name</div>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="destination">Destination</label>
                            <div class="form-control-wrapper">
                                <input type="text" id="destination" name="destination" class="form-control" required>
                                <span class="input-icon">
                                    <i class="fas fa-map-marker-alt"></i>
                                </span>
                                <div class="invalid-feedback">Please enter a valid destination</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="aeroport_depart">Departure Airport</label>
                            <div class="form-control-wrapper">
                                <input type="text" id="aeroport_depart" name="aeroport_depart" class="form-control" required>
                                <span class="input-icon">
                                    <i class="fas fa-plane-departure"></i>
                                </span>
                                <div class="invalid-feedback">Please enter a valid departure airport</div>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="aeroport_arrivee">Arrival Airport</label>
                            <div class="form-control-wrapper">
                                <input type="text" id="aeroport_arrivee" name="aeroport_arrivee" class="form-control" required>
                                <span class="input-icon">
                                    <i class="fas fa-plane-arrival"></i>
                                </span>
                                <div class="invalid-feedback">Please enter a valid arrival airport</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="date_depart">Departure Date</label>
                            <div class="form-control-wrapper">
                                <input type="datetime-local" id="date_depart" name="date_depart" class="form-control date-input" required>
                                <span class="input-icon">
                                    <i class="fas fa-calendar-alt"></i>
                                </span>
                                <div class="invalid-feedback">Please enter a valid departure date</div>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="date_arrivee">Arrival Date</label>
                            <div class="form-control-wrapper">
                                <input type="datetime-local" id="date_arrivee" name="date_arrivee" class="form-control date-input" required>
                                <span class="input-icon">
                                    <i class="fas fa-calendar-alt"></i>
                                </span>
                                <div class="invalid-feedback">Please enter a valid arrival date</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label for="prix">Price (€)</label>
                        <div class="form-control-wrapper">
                            <input type="number" id="prix" name="prix" class="form-control" step="0.01" min="0" required>
                            <span class="input-icon">
                                <i class="fas fa-euro-sign"></i>
                            </span>
                            <div class="invalid-feedback">Please enter a valid price (greater than 0)</div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" id="cancelBtn">Cancel</button>
                <button type="button" class="btn btn-submit" id="submitFlightBtn">
                    <span class="spinner"></span>
                    Create Flight
                </button>
            </div>
        </div>
    </div>
    
    <!-- Edit Flight Modal -->
    <div id="editFlightModal" class="modal-overlay">
        <div class="modal-container">
            <div class="modal-header">
                <h3 class="modal-title">Edit Flight</h3>
                <button class="modal-close" id="closeEditModal">&times;</button>
            </div>
            <div class="modal-body">
                <form id="editFlightForm">
                    <input type="hidden" id="edit_flight_id" name="id">
                    <div class="form-row">
                        <div class="form-group">
                            <label for="edit_compagnie">Company</label>
                            <div class="form-control-wrapper">
                                <input type="text" id="edit_compagnie" name="compagnie" class="form-control" required>
                                <span class="input-icon">
                                    <i class="fas fa-plane"></i>
                                </span>
                                <div class="invalid-feedback">Please enter a valid company name</div>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="edit_destination">Destination</label>
                            <div class="form-control-wrapper">
                                <input type="text" id="edit_destination" name="destination" class="form-control" required>
                                <span class="input-icon">
                                    <i class="fas fa-map-marker-alt"></i>
                                </span>
                                <div class="invalid-feedback">Please enter a valid destination</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="edit_aeroport_depart">Departure Airport</label>
                            <div class="form-control-wrapper">
                                <input type="text" id="edit_aeroport_depart" name="aeroport_depart" class="form-control" required>
                                <span class="input-icon">
                                    <i class="fas fa-plane-departure"></i>
                                </span>
                                <div class="invalid-feedback">Please enter a valid departure airport</div>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="edit_aeroport_arrivee">Arrival Airport</label>
                            <div class="form-control-wrapper">
                                <input type="text" id="edit_aeroport_arrivee" name="aeroport_arrivee" class="form-control" required>
                                <span class="input-icon">
                                    <i class="fas fa-plane-arrival"></i>
                                </span>
                                <div class="invalid-feedback">Please enter a valid arrival airport</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="edit_date_depart">Departure Date</label>
                            <div class="form-control-wrapper">
                                <input type="datetime-local" id="edit_date_depart" name="date_depart" class="form-control date-input" required>
                                <span class="input-icon">
                                    <i class="fas fa-calendar-alt"></i>
                                </span>
                                <div class="invalid-feedback">Please enter a valid departure date</div>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="edit_date_arrivee">Arrival Date</label>
                            <div class="form-control-wrapper">
                                <input type="datetime-local" id="edit_date_arrivee" name="date_arrivee" class="form-control date-input" required>
                                <span class="input-icon">
                                    <i class="fas fa-calendar-alt"></i>
                                </span>
                                <div class="invalid-feedback">Please enter a valid arrival date</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label for="edit_prix">Price (€)</label>
                        <div class="form-control-wrapper">
                            <input type="number" id="edit_prix" name="prix" class="form-control" step="0.01" min="0" required>
                            <span class="input-icon">
                                <i class="fas fa-euro-sign"></i>
                            </span>
                            <div class="invalid-feedback">Please enter a valid price (greater than 0)</div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" id="cancelEditBtn">Cancel</button>
                <button type="button" class="btn btn-submit" id="submitEditBtn">
                    <span class="spinner"></span>
                    Update Flight
                </button>
            </div>
        </div>
    </div>
    
    <!-- Success Notification -->
    <div class="notification" id="successNotification">
        Flight updated successfully!
    </div>
{% endblock %}

{% block admin_javascripts %}
<script>
    // Direct function to open the create modal
    function openFlightModal() {
        console.log("Opening create modal");
        const modal = document.getElementById('createFlightModal');
        if (modal) {
            modal.classList.add('active');
            
            // Set min date for date inputs to today
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('date_depart').setAttribute('min', today + 'T00:00');
            document.getElementById('date_arrivee').setAttribute('min', today + 'T00:00');
        } else {
            console.error("Modal not found!");
        }
        return false; // Prevent default link behavior
    }
    
    // Function to open the edit modal with prefilled data
    function openEditModal(id, compagnie, destination, aeroportDepart, aeroportArrivee, dateDepart, dateArrivee, prix) {
        console.log("Opening edit modal for flight ID:", id);
        const modal = document.getElementById('editFlightModal');
        
        if (modal) {
            // Fill the form with existing data
            document.getElementById('edit_flight_id').value = id;
            document.getElementById('edit_compagnie').value = compagnie;
            document.getElementById('edit_destination').value = destination;
            document.getElementById('edit_aeroport_depart').value = aeroportDepart;
            document.getElementById('edit_aeroport_arrivee').value = aeroportArrivee;
            document.getElementById('edit_date_depart').value = dateDepart;
            document.getElementById('edit_date_arrivee').value = dateArrivee;
            document.getElementById('edit_prix').value = prix;
            
            // Show the modal
            modal.classList.add('active');
        } else {
            console.error("Edit modal not found!");
        }
        return false;
    }

    document.addEventListener('DOMContentLoaded', function() {
        console.log("Modal scripts loaded");
        
        // Elements for create modal
        const createModal = document.getElementById('createFlightModal');
        const closeCreateModalBtn = document.getElementById('closeModal');
        const cancelCreateBtn = document.getElementById('cancelBtn');
        const createForm = document.getElementById('newFlightForm');
        const submitCreateBtn = document.getElementById('submitFlightBtn');
        
        // Elements for edit modal
        const editModal = document.getElementById('editFlightModal');
        const closeEditModalBtn = document.getElementById('closeEditModal');
        const cancelEditBtn = document.getElementById('cancelEditBtn');
        const editForm = document.getElementById('editFlightForm');
        const submitEditBtn = document.getElementById('submitEditBtn');
        
        const notification = document.getElementById('successNotification');
        
        // Close create modal function
        function closeCreateModal() {
            createModal.classList.remove('active');
            createForm.reset();
            clearValidation(createForm);
        }
        
        // Close edit modal function
        function closeEditModal() {
            editModal.classList.remove('active');
            clearValidation(editForm);
        }
        
        // Create modal event listeners
        if (closeCreateModalBtn) {
            closeCreateModalBtn.addEventListener('click', closeCreateModal);
        }
        
        if (cancelCreateBtn) {
            cancelCreateBtn.addEventListener('click', closeCreateModal);
        }
        
        // Close modal when clicking outside
        createModal.addEventListener('click', (e) => {
            if (e.target === createModal) {
                closeCreateModal();
            }
        });
        
        // Edit modal event listeners
        if (closeEditModalBtn) {
            closeEditModalBtn.addEventListener('click', closeEditModal);
        }
        
        if (cancelEditBtn) {
            cancelEditBtn.addEventListener('click', closeEditModal);
        }
        
        // Close modal when clicking outside
        editModal.addEventListener('click', (e) => {
            if (e.target === editModal) {
                closeEditModal();
            }
        });
        
        // Form validation functions
        function validateDates(departureDateInput, arrivalDateInput) {
            const departureDate = new Date(departureDateInput.value);
            const arrivalDate = new Date(arrivalDateInput.value);
            
            if (departureDateInput.value && arrivalDateInput.value) {
                if (arrivalDate <= departureDate) {
                    arrivalDateInput.classList.add('is-invalid');
                    arrivalDateInput.nextElementSibling.nextElementSibling.textContent = 'Arrival date must be after departure date';
                    return false;
                } else {
                    arrivalDateInput.classList.remove('is-invalid');
                    return true;
                }
            }
            return true;
        }
        
        // Validate create form dates
        const departureDateInput = document.getElementById('date_depart');
        const arrivalDateInput = document.getElementById('date_arrivee');
        
        departureDateInput.addEventListener('change', () => {
            if (departureDateInput.value) {
                arrivalDateInput.setAttribute('min', departureDateInput.value);
                validateDates(departureDateInput, arrivalDateInput);
            }
        });
        
        arrivalDateInput.addEventListener('change', () => {
            validateDates(departureDateInput, arrivalDateInput);
        });
        
        // Validate edit form dates
        const editDepartureDateInput = document.getElementById('edit_date_depart');
        const editArrivalDateInput = document.getElementById('edit_date_arrivee');
        
        editDepartureDateInput.addEventListener('change', () => {
            if (editDepartureDateInput.value) {
                editArrivalDateInput.setAttribute('min', editDepartureDateInput.value);
                validateDates(editDepartureDateInput, editArrivalDateInput);
            }
        });
        
        editArrivalDateInput.addEventListener('change', () => {
            validateDates(editDepartureDateInput, editArrivalDateInput);
        });
        
        // Form validation
        function validateForm(form) {
            let isValid = true;
            
            // Check all required fields
            const requiredInputs = form.querySelectorAll('[required]');
            requiredInputs.forEach(input => {
                if (!input.value.trim()) {
                    input.classList.add('is-invalid');
                    isValid = false;
                } else {
                    input.classList.remove('is-invalid');
                }
            });
            
            // Check price
            const priceInput = form.querySelector('[name="prix"]');
            if (priceInput && (!priceInput.value || parseFloat(priceInput.value) <= 0)) {
                priceInput.classList.add('is-invalid');
                isValid = false;
            }
            
            // Check dates - for create form
            if (form.id === 'newFlightForm') {
                if (!validateDates(departureDateInput, arrivalDateInput)) {
                    isValid = false;
                }
            }
            
            // Check dates - for edit form
            if (form.id === 'editFlightForm') {
                if (!validateDates(editDepartureDateInput, editArrivalDateInput)) {
                    isValid = false;
                }
            }
            
            return isValid;
        }
        
        // Clear all validation states
        function clearValidation(form) {
            const inputs = form.querySelectorAll('.form-control');
            inputs.forEach(input => {
                input.classList.remove('is-invalid');
            });
        }
        
        // Submit create form
        submitCreateBtn.addEventListener('click', function() {
            if (validateForm(createForm)) {
                submitCreateBtn.classList.add('loading');
                submitCreateBtn.disabled = true;
                
                // Create FormData object
                const formData = new FormData(createForm);
                
                // Send AJAX request
                fetch('{{ path('app_vol_new_ajax') }}', {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    submitCreateBtn.classList.remove('loading');
                    submitCreateBtn.disabled = false;
                    
                    if (data.success) {
                        // Show success notification
                        notification.textContent = 'Flight created successfully!';
                        notification.classList.add('active');
                        setTimeout(() => {
                            notification.classList.remove('active');
                        }, 3000);
                        
                        // Close modal and reload page to show new flight
                        closeCreateModal();
                        setTimeout(() => {
                            window.location.reload();
                        }, 1000);
                    } else {
                        // Handle errors from server
                        if (data.errors) {
                            Object.keys(data.errors).forEach(field => {
                                const input = document.getElementById(field);
                                if (input) {
                                    input.classList.add('is-invalid');
                                    const feedback = input.nextElementSibling.nextElementSibling;
                                    if (feedback) {
                                        feedback.textContent = data.errors[field];
                                    }
                                }
                            });
                        }
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    submitCreateBtn.classList.remove('loading');
                    submitCreateBtn.disabled = false;
                });
            }
        });
        
        // Submit edit form
        submitEditBtn.addEventListener('click', function() {
            if (validateForm(editForm)) {
                submitEditBtn.classList.add('loading');
                submitEditBtn.disabled = true;
                
                // Create FormData object
                const formData = new FormData(editForm);
                const flightId = document.getElementById('edit_flight_id').value;
                
                // Send AJAX request
                fetch(`{{ path('app_vol_edit_ajax', {'id': 'FLIGHT_ID'}) }}`.replace('FLIGHT_ID', flightId), {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    submitEditBtn.classList.remove('loading');
                    submitEditBtn.disabled = false;
                    
                    if (data.success) {
                        // Show success notification
                        notification.textContent = 'Flight updated successfully!';
                        notification.classList.add('active');
                        setTimeout(() => {
                            notification.classList.remove('active');
                        }, 3000);
                        
                        // Close modal and reload page to show updated flight
                        closeEditModal();
                        setTimeout(() => {
                            window.location.reload();
                        }, 1000);
                    } else {
                        // Handle errors from server
                        if (data.errors) {
                            Object.keys(data.errors).forEach(field => {
                                const input = document.getElementById('edit_' + field);
                                if (input) {
                                    input.classList.add('is-invalid');
                                    const feedback = input.nextElementSibling.nextElementSibling;
                                    if (feedback) {
                                        feedback.textContent = data.errors[field];
                                    }
                                }
                            });
                        }
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    submitEditBtn.classList.remove('loading');
                    submitEditBtn.disabled = false;
                });
            }
        });
        
        // Field validation on blur
        function setupFieldValidation(form) {
            const inputs = form.querySelectorAll('.form-control');
            inputs.forEach(input => {
                input.addEventListener('blur', function() {
                    if (this.hasAttribute('required') && !this.value.trim()) {
                        this.classList.add('is-invalid');
                    } else {
                        this.classList.remove('is-invalid');
                    }
                    
                    // Special case for price
                    if (this.name === 'prix' && (parseFloat(this.value) <= 0)) {
                        this.classList.add('is-invalid');
                    }
                });
            });
        }
        
        // Set up field validation for both forms
        setupFieldValidation(createForm);
        setupFieldValidation(editForm);
    });
</script>
{% endblock %} 